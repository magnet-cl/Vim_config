extends c

###########################################################################
#                            TextMate Snippets                            #
###########################################################################

snippet inc "#include local header (inc)" !
#include "${1:`!p snip.rv = snip.basename + '.hpp'`}"
endsnippet

snippet Inc "#include <> (Inc)" !
#include <${1:.hpp}>
endsnippet

snippet once "Include header once only guard" !
#ifndef ${1:`!p
if not snip.c:
	snip.rv = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper() + "_"
else:
    snip.rv = snip.c`}
#define $1

${0}

#endif // end of include guard: $1
endsnippet

snippet cbe "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/}(${2:arguments});
	virtual ~${1/(\w+).*/$1/}();

private:
	${0:/* data */}
};
endsnippet

snippet cc "Copy constructor"
${1:`!p snip.rv = snip.basename or "Name"`}(const $1&)${2: = ${3:default}};
endsnippet

snippet mc "Move constructor"
${1:`!p snip.rv = snip.basename or "Name"`}($1&&)${2: = ${3:default}};
endsnippet

snippet ca "Copy assignment"
${1:`!p snip.rv = snip.basename or "Name"`}& operator=(const $1&)${2: = ${3:default}};
endsnippet

snippet ma "Move assignment"
${1:`!p snip.rv = snip.basename or "Name"`}& operator=($1&&)${2: = ${3:default}};
endsnippet

snippet out "std::cout (cout)" i
std::cout << $0
endsnippet

snippet err "std::cerr (cerr)" i
std::cerr << $0
endsnippet

snippet end "std::endl (endl)" i
<< std::endl$0
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`} {
	$0
}${1/.+/ \/\/ end namespace /m}$1
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r")) {
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> ${3:map};$0
endsnippet

snippet vec "std::vector (v)"
std::vector<${1:int}> ${2:v};$0
endsnippet

snippet set "std::set (s)"
std::set<${1:int}> ${2:s};$0
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet str "std::string .. (string)"
std::string ${0}
endsnippet

# vim:ft=snippets:
